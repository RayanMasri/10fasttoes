[{"C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\reportWebVitals.js":"1","C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\App.js":"2","C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\index.js":"3","C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\components\\Control.js":"4","C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\components\\Users.js":"5"},{"size":362,"mtime":1606737794037,"results":"6","hashOfConfig":"7"},{"size":3656,"mtime":1607165396301,"results":"8","hashOfConfig":"7"},{"size":500,"mtime":1606737794037,"results":"9","hashOfConfig":"7"},{"size":18236,"mtime":1607165460288,"results":"10","hashOfConfig":"7"},{"size":6888,"mtime":1607164725750,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xahjee",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\reportWebVitals.js",[],"C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\App.js",[],"C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\index.js",[],"C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\components\\Control.js",["23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Control extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.socket = props.socket;\r\n\r\n        this.state = {\r\n            words: [],\r\n            index: 0,\r\n            started: false,\r\n            time: 'waiting',\r\n        };\r\n\r\n        this.keystrokes = {\r\n            idle: 0,\r\n            error: 0,\r\n            correct: 0,\r\n        };\r\n        this.initialTime = new Date();\r\n        this.accuracy = 100;\r\n        this.completed = 0;\r\n        this.interval = setInterval(() => {\r\n            if (this.state.started) {\r\n                this.updateUser('playing');\r\n            }\r\n        }, 100);\r\n        this.finished = false;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket.on('room.update', (data) => {\r\n            if (this.finished) {\r\n                this.endScreen(\r\n                    data.clients\r\n                        .filter(\r\n                            (client) =>\r\n                                client.status == 'done' ||\r\n                                client.status == 'done.left'\r\n                        )\r\n                        .sort((a, b) =>\r\n                            a.id == this.socket.id\r\n                                ? -1\r\n                                : b.id == this.socket.id\r\n                                ? 1\r\n                                : 0\r\n                        )\r\n                );\r\n            }\r\n\r\n            if (!this.state.started) {\r\n                if (data.status.tag == 'starting') {\r\n                    this.setState({\r\n                        words: this.state.words,\r\n                        index: this.state.index,\r\n                        started: this.state.started,\r\n                        time: data.status.info.countdown.toString(),\r\n                    });\r\n                } else {\r\n                    if (data.status.tag == 'started') {\r\n                        this.setState({\r\n                            words: this.state.words,\r\n                            index: this.state.index,\r\n                            started: true,\r\n                            time: this.state.time,\r\n                        });\r\n                        this.initialTime = new Date();\r\n                    } else {\r\n                        this.setState({\r\n                            words: this.state.words,\r\n                            index: this.state.index,\r\n                            started: this.state.started,\r\n                            time: 'waiting',\r\n                        });\r\n                    }\r\n                }\r\n                console.log(data);\r\n            }\r\n\r\n            if (!this.state.words.length) {\r\n                this.setState({\r\n                    words: data.words.map((word, index) => {\r\n                        return {\r\n                            word: word,\r\n                            status: index == 0 ? 'highlight' : 'idle',\r\n                        };\r\n                    }),\r\n                    index: 0,\r\n                    started: this.state.started,\r\n                    time: this.state.time,\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    endScreen(clients) {\r\n        ReactDOM.render(\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        backgroundColor: '#a7c8e7',\r\n                    }}\r\n                ></div>\r\n                {clients.map((client) => {\r\n                    return (\r\n                        <div\r\n                            style={{\r\n                                width: '900px',\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    width: '125px',\r\n                                }}\r\n                            >\r\n                                {client.name}\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    width: '225px',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                }}\r\n                            >\r\n                                <span>{client.wpm}</span>\r\n                                <span>(words per minute)</span>\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    width: '100px',\r\n                                    display: 'flex',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'center',\r\n                                    justifyContent: 'center',\r\n                                }}\r\n                            >\r\n                                <div\r\n                                    style={{\r\n                                        fontSize: '15px',\r\n                                        display: 'flex',\r\n                                        justifyContent: 'space-between',\r\n                                    }}\r\n                                >\r\n                                    <span\r\n                                        style={{\r\n                                            marginRight: '5px',\r\n                                        }}\r\n                                    >\r\n                                        (\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            color: 'green',\r\n                                            marginRight: '5px',\r\n                                        }}\r\n                                    >\r\n                                        {client.correct}\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            marginRight: '5px',\r\n                                        }}\r\n                                    >\r\n                                        |\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            color: 'red',\r\n                                            marginRight: '5px',\r\n                                        }}\r\n                                    >\r\n                                        {client.error}\r\n                                    </span>\r\n                                    <span\r\n                                        style={{\r\n                                            marginRight: '5px',\r\n                                        }}\r\n                                    >\r\n                                        )\r\n                                    </span>\r\n                                </div>\r\n\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: '19px',\r\n                                    }}\r\n                                >\r\n                                    {client.correct + client.error}\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    width: '100px',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                }}\r\n                            >\r\n                                <span>{client.accuracy}%</span>\r\n                            </div>\r\n\r\n                            <div\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    width: '100px',\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                }}\r\n                            >\r\n                                <span>\r\n                                    {new Date(client.time)\r\n                                        .getUTCMinutes()\r\n                                        .toString()\r\n                                        .padStart(2, '0') +\r\n                                        ':' +\r\n                                        new Date(client.time)\r\n                                            .getSeconds()\r\n                                            .toString()\r\n                                            .padStart(2, '0')}\r\n                                </span>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>,\r\n            document.querySelector('.control')\r\n        );\r\n    }\r\n\r\n    updateUser(status) {\r\n        var diff = this.keystrokes.error - this.keystrokes.correct;\r\n        var res = diff <= 0 ? diff : 0;\r\n        var accuracy = Math.abs(\r\n            ((res / this.keystrokes.idle) * 100).toFixed(2)\r\n        );\r\n        var entries = this.keystrokes.correct + this.keystrokes.error;\r\n        var diff = new Date(Math.abs(this.initialTime - new Date()));\r\n        var ndiff = (diff.getUTCSeconds() + diff.getUTCMinutes() * 60) / 60;\r\n        var wpm = ndiff < 0.01 ? 0 : Math.round(entries / 5 / ndiff);\r\n        var percentage = (this.completed / 70) * 100;\r\n        this.socket.emit(\r\n            'user.update',\r\n            wpm,\r\n            accuracy,\r\n            percentage,\r\n            status,\r\n            this.keystrokes.correct,\r\n            this.keystrokes.error,\r\n            Math.abs(this.initialTime - new Date())\r\n        );\r\n    }\r\n\r\n    update(event) {\r\n        if (event.target.value === null) return;\r\n\r\n        const string = event.target.value;\r\n\r\n        if (\r\n            string.trim() !=\r\n            this.state.words[this.state.index].word.substr(\r\n                0,\r\n                string.trim().length\r\n            )\r\n        ) {\r\n            if (/\\S/.test(string)) {\r\n                this.keystrokes.error += 1;\r\n            }\r\n        } else {\r\n            if (/\\S/.test(string)) {\r\n                this.keystrokes.correct += 1;\r\n            }\r\n        }\r\n\r\n        if (/\\S/.test(string)) {\r\n            this.keystrokes.idle += 1;\r\n        }\r\n\r\n        if (string.indexOf(' ') >= 0) {\r\n            var correct =\r\n                string.split(' ')[0] == this.state.words[this.state.index].word;\r\n\r\n            if (correct) {\r\n                this.completed += 1;\r\n\r\n                if (this.state.index == this.state.words.length - 1) {\r\n                    this.end();\r\n                }\r\n\r\n                this.setState({\r\n                    words: this.state.words.map((item, index) => {\r\n                        return {\r\n                            word: item.word,\r\n                            status:\r\n                                this.state.index == index\r\n                                    ? 'correct'\r\n                                    : this.state.index + 1 == index\r\n                                    ? 'highlight'\r\n                                    : item.status,\r\n                        };\r\n                    }),\r\n                    index: this.state.index + 1,\r\n                });\r\n            } else {\r\n                if (this.state.words[this.state.index].status != 'highlight') {\r\n                    this.setState({\r\n                        words: this.state.words.map((item, index) => {\r\n                            return {\r\n                                word: item.word,\r\n                                status:\r\n                                    this.state.index == index\r\n                                        ? 'highlight'\r\n                                        : item.status,\r\n                            };\r\n                        }),\r\n                        index: this.state.index,\r\n                    });\r\n                }\r\n            }\r\n\r\n            event.target.value = '';\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            string.trim() !=\r\n            this.state.words[this.state.index].word.substr(\r\n                0,\r\n                string.trim().length\r\n            )\r\n        ) {\r\n            if (this.state.words[this.state.index].status != 'incorrect') {\r\n                this.setState({\r\n                    words: this.state.words.map((item, index) => {\r\n                        return {\r\n                            word: item.word,\r\n                            status:\r\n                                this.state.index == index\r\n                                    ? 'incorrect'\r\n                                    : item.status,\r\n                        };\r\n                    }),\r\n                    index: this.state.index,\r\n                });\r\n            }\r\n        } else {\r\n            if (this.state.words[this.state.index].status != 'highlight') {\r\n                this.setState({\r\n                    words: this.state.words.map((item, index) => {\r\n                        return {\r\n                            word: item.word,\r\n                            status:\r\n                                this.state.index == index\r\n                                    ? 'highlight'\r\n                                    : item.status,\r\n                        };\r\n                    }),\r\n                    index: this.state.index,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    end() {\r\n        clearInterval(this.interval);\r\n        this.finished = true;\r\n        this.updateUser('done');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: 'max-content',\r\n                    border: '2px solid gray',\r\n                    borderRadius: '10px',\r\n                    padding: '5px',\r\n                }}\r\n                class='control'\r\n            >\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        display: this.state.started ? 'none' : 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center',\r\n                        position: 'fixed',\r\n                        top: '0',\r\n                        left: '0',\r\n                        backgroundColor: '#ccc8',\r\n                        fontSize: '50px',\r\n                    }}\r\n                >\r\n                    <span>{this.state.time}</span>\r\n                </div>\r\n                <div>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            justifyContent: 'space-between',\r\n                            width: 'max-content',\r\n                            padding: '10px',\r\n                            height: '50px',\r\n                        }}\r\n                    >\r\n                        {(\r\n                            this.state.words.chunk(5)[\r\n                                Math.ceil((this.state.index + 1) / 14) - 1\r\n                            ] || []\r\n                        ).map((item) => {\r\n                            return (\r\n                                <span\r\n                                    style={{\r\n                                        fontSize: '30px',\r\n                                        textAlign: 'center',\r\n                                        height: 'max-content',\r\n                                        padding: '5px',\r\n                                        color:\r\n                                            item.status == 'correct'\r\n                                                ? 'green'\r\n                                                : 'black',\r\n                                        backgroundColor:\r\n                                            item.status == 'incorrect'\r\n                                                ? 'red'\r\n                                                : item.status == 'highlight'\r\n                                                ? '#ccc'\r\n                                                : 'transparent',\r\n                                    }}\r\n                                >\r\n                                    {item.word}\r\n                                </span>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <div>\r\n                        <input\r\n                            type='text'\r\n                            style={{\r\n                                fontSize: '30px',\r\n                                width: '100%',\r\n                                boxSizing: 'border-box',\r\n                                padding: '5px',\r\n                            }}\r\n                            disabled={!this.state.started}\r\n                            onChange={this.update.bind(this)}\r\n                        ></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nArray.prototype.chunk = function (size) {\r\n    return this.reduce(\r\n        (memo, value, index) => {\r\n            if (index % (this.length / size) == 0 && index !== 0) memo.push([]);\r\n            memo[memo.length - 1].push(value);\r\n            return memo;\r\n        },\r\n        [[]]\r\n    );\r\n};\r\n\r\nexport default Control;\r\n","C:\\Users\\MrRya\\OneDrive\\Desktop\\other\\work\\js\\react\\10ff\\application\\src\\components\\Users.js",["48","49","50","51"],{"ruleId":"52","severity":1,"message":"53","line":39,"column":47,"nodeType":"54","messageId":"55","endLine":39,"endColumn":49},{"ruleId":"52","severity":1,"message":"53","line":40,"column":47,"nodeType":"54","messageId":"55","endLine":40,"endColumn":49},{"ruleId":"52","severity":1,"message":"53","line":43,"column":34,"nodeType":"54","messageId":"55","endLine":43,"endColumn":36},{"ruleId":"52","severity":1,"message":"53","line":45,"column":40,"nodeType":"54","messageId":"55","endLine":45,"endColumn":42},{"ruleId":"52","severity":1,"message":"53","line":53,"column":37,"nodeType":"54","messageId":"55","endLine":53,"endColumn":39},{"ruleId":"52","severity":1,"message":"53","line":61,"column":41,"nodeType":"54","messageId":"55","endLine":61,"endColumn":43},{"ruleId":"52","severity":1,"message":"53","line":86,"column":43,"nodeType":"54","messageId":"55","endLine":86,"endColumn":45},{"ruleId":"56","severity":1,"message":"57","line":251,"column":13,"nodeType":"58","messageId":"59","endLine":251,"endColumn":17},{"ruleId":"52","severity":1,"message":"60","line":273,"column":27,"nodeType":"54","messageId":"55","endLine":273,"endColumn":29},{"ruleId":"52","severity":1,"message":"53","line":294,"column":38,"nodeType":"54","messageId":"55","endLine":294,"endColumn":40},{"ruleId":"52","severity":1,"message":"53","line":299,"column":38,"nodeType":"54","messageId":"55","endLine":299,"endColumn":40},{"ruleId":"52","severity":1,"message":"53","line":308,"column":50,"nodeType":"54","messageId":"55","endLine":308,"endColumn":52},{"ruleId":"52","severity":1,"message":"53","line":310,"column":60,"nodeType":"54","messageId":"55","endLine":310,"endColumn":62},{"ruleId":"52","severity":1,"message":"60","line":318,"column":63,"nodeType":"54","messageId":"55","endLine":318,"endColumn":65},{"ruleId":"52","severity":1,"message":"53","line":324,"column":54,"nodeType":"54","messageId":"55","endLine":324,"endColumn":56},{"ruleId":"52","severity":1,"message":"60","line":340,"column":27,"nodeType":"54","messageId":"55","endLine":340,"endColumn":29},{"ruleId":"52","severity":1,"message":"60","line":346,"column":59,"nodeType":"54","messageId":"55","endLine":346,"endColumn":61},{"ruleId":"52","severity":1,"message":"53","line":352,"column":50,"nodeType":"54","messageId":"55","endLine":352,"endColumn":52},{"ruleId":"52","severity":1,"message":"60","line":361,"column":59,"nodeType":"54","messageId":"55","endLine":361,"endColumn":61},{"ruleId":"52","severity":1,"message":"53","line":367,"column":50,"nodeType":"54","messageId":"55","endLine":367,"endColumn":52},{"ruleId":"52","severity":1,"message":"53","line":435,"column":57,"nodeType":"54","messageId":"55","endLine":435,"endColumn":59},{"ruleId":"52","severity":1,"message":"53","line":439,"column":57,"nodeType":"54","messageId":"55","endLine":439,"endColumn":59},{"ruleId":"52","severity":1,"message":"53","line":441,"column":63,"nodeType":"54","messageId":"55","endLine":441,"endColumn":65},{"ruleId":"61","severity":1,"message":"62","line":470,"column":1,"nodeType":"63","messageId":"55","endLine":479,"endColumn":2},{"ruleId":"52","severity":1,"message":"53","line":473,"column":46,"nodeType":"54","messageId":"55","endLine":473,"endColumn":48},{"ruleId":"52","severity":1,"message":"53","line":19,"column":55,"nodeType":"54","messageId":"55","endLine":19,"endColumn":57},{"ruleId":"52","severity":1,"message":"53","line":20,"column":55,"nodeType":"54","messageId":"55","endLine":20,"endColumn":57},{"ruleId":"64","severity":1,"message":"65","line":80,"column":49,"nodeType":"66","endLine":80,"endColumn":62},{"ruleId":"64","severity":1,"message":"65","line":90,"column":49,"nodeType":"66","endLine":90,"endColumn":62},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'diff' is already defined.","Identifier","redeclared","Expected '!==' and instead saw '!='.","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute"]